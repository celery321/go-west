// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type BattleHTTPServer interface {
	NStart(context.Context, *BattleRequest) (*BattleReply, error)
	Start(context.Context, *BattleRequest) (*BattleReply, error)
}

func RegisterBattleHTTPServer(s *http.Server, srv BattleHTTPServer) {
	r := s.Route("/")
	r.POST("/usm-api/startBattle", _Battle_Start0_HTTP_Handler(srv))
	r.GET("/nstart", _Battle_NStart0_HTTP_Handler(srv))
}

func _Battle_Start0_HTTP_Handler(srv BattleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BattleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/hello.v1.Battle/Start")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Start(ctx, req.(*BattleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BattleReply)
		return ctx.Result(200, reply)
	}
}

func _Battle_NStart0_HTTP_Handler(srv BattleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BattleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/hello.v1.Battle/NStart")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.NStart(ctx, req.(*BattleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BattleReply)
		return ctx.Result(200, reply)
	}
}

type BattleHTTPClient interface {
	NStart(ctx context.Context, req *BattleRequest, opts ...http.CallOption) (rsp *BattleReply, err error)
	Start(ctx context.Context, req *BattleRequest, opts ...http.CallOption) (rsp *BattleReply, err error)
}

type BattleHTTPClientImpl struct {
	cc *http.Client
}

func NewBattleHTTPClient(client *http.Client) BattleHTTPClient {
	return &BattleHTTPClientImpl{client}
}

func (c *BattleHTTPClientImpl) NStart(ctx context.Context, in *BattleRequest, opts ...http.CallOption) (*BattleReply, error) {
	var out BattleReply
	pattern := "/nstart"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/hello.v1.Battle/NStart"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BattleHTTPClientImpl) Start(ctx context.Context, in *BattleRequest, opts ...http.CallOption) (*BattleReply, error) {
	var out BattleReply
	pattern := "/usm-api/startBattle"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/hello.v1.Battle/Start"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
